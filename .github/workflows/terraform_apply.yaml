name: Apply terraform plan
on:
  push:
    branches: [master, dev]

jobs:
  start-runner:
    name: Start self-hosted EC2 runner.
    runs-on: self-hosted
    permissions:
      id-token: write
      contents: read
      pull-requests: write
  #   outputs:
  #     label: ${{ steps.start-ec2-runner.outputs.label }}
  #     ec2-instance-id: ${{ steps.start-ec2-runner.outputs.ec2-instance-id }}
  #   steps:
  #     - name: Configure AWS Credentials for jrs-local
  #       uses: aws-actions/configure-aws-credentials@v4
  #       with:
  #         audience: sts.amazonaws.com
  #         aws-region: us-east-1
  #         role-to-assume: 'arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:role/github-actions-trust-policy'
  #         role-duration-seconds: 1800
  #         role-session-name: ${{ github.actor }}

  #     - name: Start EC2 runner
  #       id: start-ec2-runner
  #       uses: machulav/ec2-github-runner@v2
  #       with:
  #         mode: start
  #         github-token: ${{ secrets.GH_PERSONAL_ACCESS_TOKEN }}
  #         ec2-image-id: ami-06aa3f7caf3a30282
  #         ec2-instance-type: t3.medium
  #         subnet-id: subnet-099e0cf8d526f00d7
  #         security-group-id: sg-018e56852a5b353cf

  # dependencies:
  #   name: Install Dependencies
  #   needs: start-runner
  #   runs-on: ${{ needs.start-runner.outputs.label }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Terraform
        id: set-up-terraform
        run: |
          sudo apt-get -y update && sudo apt-get install -y gnupg software-properties-common
          wget -O- https://apt.releases.hashicorp.com/gpg | \
            gpg --dearmor | \
            sudo tee /usr/share/keyrings/hashicorp-archive-keyring.gpg
          gpg --no-default-keyring \
            --keyring /usr/share/keyrings/hashicorp-archive-keyring.gpg \
            --fingerprint
          echo "deb [signed-by=/usr/share/keyrings/hashicorp-archive-keyring.gpg] \
            https://apt.releases.hashicorp.com $(lsb_release -cs) main" | \
            sudo tee /etc/apt/sources.list.d/hashicorp.list
          sudo apt -y update
          sudo apt-get install -y terraform=1.3.10-1 unzip

      - name: Set up aws CLI
        id: set-up-aws-cli
        run: |
          if ! aws --version >/dev/null 2>&1; then
            echo "Installing AWS CLI..."
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            unzip -q awscliv2.zip
            sudo ./aws/install --update
          else
            echo "Updating AWS CLI..."
            sudo ./aws/install --update
          fi

      - name: Set ip gh CLI
        id: set-up-gh-cli
        run: |
          type -p curl >/dev/null || (sudo apt-get update && sudo apt-get install curl -y)
          if ! dpkg -s gh >/dev/null 2>&1; then
            curl -fsSL https://cli.github.com/packages/githubcli-archive-keyring.gpg | sudo dd of=/usr/share/keyrings/githubcli-archive-keyring.gpg \
              && sudo chmod go+r /usr/share/keyrings/githubcli-archive-keyring.gpg \
              && echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/githubcli-archive-keyring.gpg] https://cli.github.com/packages stable main" | sudo tee /etc/apt/sources.list.d/github-cli.list > /dev/null \
              && sudo apt-get update \
              && sudo apt-get install gh -y
          else
            echo "GitHub CLI is already installed."
          fi

  apply:
    name: Apply terraform plan
    needs:
       - start-runner
      #  - dependencies
    runs-on: self-hosted
    permissions:
      id-token: write
      contents: read
    defaults:
      run:
        working-directory: .
    steps:
      - name: Checkout Repo
        uses: actions/checkout@v3

      - name: Environments Dependencies
        id: dependencies
        shell: bash
        run: |
          BRANCH="${GITHUB_HEAD_REF:-${GITHUB_REF#refs/heads/}}"
          if [[ $BRANCH == "master" ]]; then
            ENVIRONMENT="dev"
            WORKSPACE="dev"
          else
            ENVIRONMENT="dev"
            WORKSPACE="dev"
          fi
          echo ${BRANCH}
          echo "environment=${ENVIRONMENT}" >> $GITHUB_OUTPUT
          echo "workspace=${WORKSPACE}" >> $GITHUB_OUTPUT

      - name: Configure AWS Credentials for jrs-local
        uses: aws-actions/configure-aws-credentials@v4
        with:
          audience: sts.amazonaws.com
          aws-region: us-east-1
          role-to-assume: 'arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:role/github-actions-trust-policy'
          role-duration-seconds: 1800
          role-session-name: ${{ github.actor }}

      - name: Terraform Setup
        uses: hashicorp/setup-terraform@v2.0.3
        with:
          terraform_version: 1.3.7
          terraform_wrapper: false

      - name: Terraform Init
        id: init-default
        run: terraform init

      - name: Terraform Workspace
        id: workspace
        env:
          TARGET: ${{ steps.dependencies.outputs.workspace }}
        run: terraform workspace select $TARGET

      - name: Terraform Init
        if: ${{ steps.dependencies.outputs.workspace == 'prod' }}
        id: init-prod
        run: terraform init

      - name: Terraform Apply
        env:
          ENVIRONMENT: ${{ steps.dependencies.outputs.environment }}
          GITHUB_TOKEN: ${{ secrets.GH_PAT_TERRAFORM }}
          GITHUB_OWNER: ${{ secrets.GH_OWNER }}
          TF_VAR_token: ${{ secrets.GH_PAT_TERRAFORM }}
        run: terraform apply -auto-approve

  # stop-runner:
  #   name: Stop self-hosted EC2 runner.
  #   needs:
  #     - start-runner
  #     - dependencies
  #     - apply
  #   runs-on: ubuntu-latest
  #   permissions:
  #     id-token: write
  #     contents: read
  #     pull-requests: write
  #   if: ${{ always() }}
  #   steps:
  #     - name: Configure AWS Credentials for jrs-local
  #       uses: aws-actions/configure-aws-credentials@v4
  #       with:
  #         audience: sts.amazonaws.com
  #         aws-region: us-east-1
  #         role-to-assume: 'arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:role/github-actions-trust-policy'
  #         role-duration-seconds: 1800
  #         role-session-name: ${{ github.actor }}

  #     - name: Stop EC2 runner
  #       uses: machulav/ec2-github-runner@v2
  #       with:
  #         mode: stop
  #         github-token: ${{ secrets.GH_PERSONAL_ACCESS_TOKEN }}
  #         label: ${{ needs.start-runner.outputs.label }}
  #         ec2-instance-id: ${{ needs.start-runner.outputs.ec2-instance-id }}
