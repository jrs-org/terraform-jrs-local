name: Create terraform plan
on:
  pull_request:
    branches: [master, dev]

jobs:
  start-runner:
    name: Start self-hosted EC2 runner.
    runs-on: self-hosted
    permissions:
      id-token: write
      contents: read
      pull-requests: write
  ## remove to use ec2 runner
  #   outputs:
  #     label: ${{ steps.start-ec2-runner.outputs.label }}
  #     ec2-instance-id: ${{ steps.start-ec2-runner.outputs.ec2-instance-id }}
  #   steps:
  #     - name: Configure AWS Credentials for jrs-local
  #       uses: aws-actions/configure-aws-credentials@v4
  #       with:
  #         audience: sts.amazonaws.com
  #         aws-region: us-east-1
  #         role-to-assume: 'arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:role/github-actions-trust-policy'
  #         role-duration-seconds: 1800
  #         role-session-name: ${{ github.actor }}

  #     - name: Start EC2 runner
  #       id: start-ec2-runner
  #       uses: machulav/ec2-github-runner@v2
  #       with:
  #         mode: start
  #         github-token: ${{ secrets.GH_PERSONAL_ACCESS_TOKEN }}
  #         ec2-image-id: ami-06aa3f7caf3a30282
  #         ec2-instance-type: t3.medium
  #         subnet-id: subnet-099e0cf8d526f00d7
  #         security-group-id: sg-018e56852a5b353cf

  # dependencies:
  #   name: Install Dependencies
  #   needs: start-runner
  #   runs-on: ${{ needs.start-runner.outputs.label }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Terraform
        id: set-up-terraform
        run: |
          sudo apt-get -y update && sudo apt-get install -y gnupg software-properties-common
          wget -O- https://apt.releases.hashicorp.com/gpg | \
            gpg --dearmor | \
            sudo tee /usr/share/keyrings/hashicorp-archive-keyring.gpg
          gpg --no-default-keyring \
            --keyring /usr/share/keyrings/hashicorp-archive-keyring.gpg \
            --fingerprint
          echo "deb [signed-by=/usr/share/keyrings/hashicorp-archive-keyring.gpg] \
            https://apt.releases.hashicorp.com $(lsb_release -cs) main" | \
            sudo tee /etc/apt/sources.list.d/hashicorp.list
          sudo apt-get -y update
          sudo apt-get install -y terraform=1.3.7 unzip

      - name: Set up aws CLI
        id: set-up-aws-cli
        run: |
          curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
          unzip awscliv2.zip
          sudo ./aws/install

      - name: Set ip gh CLI
        id: set-up-gh-cli
        run: |
          type -p curl >/dev/null || (sudo apt update && sudo apt install curl -y)
          curl -fsSL https://cli.github.com/packages/githubcli-archive-keyring.gpg | sudo dd of=/usr/share/keyrings/githubcli-archive-keyring.gpg \
            && sudo chmod go+r /usr/share/keyrings/githubcli-archive-keyring.gpg \
            && echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/githubcli-archive-keyring.gpg] https://cli.github.com/packages stable main" | sudo tee /etc/apt/sources.list.d/github-cli.list > /dev/null \
            && sudo apt-get update \
            && sudo apt-get install gh -y

  plan:
    name: Terraform Plan
    needs:
    - start-runner
    # - dependencies
    runs-on: self-hosted
    permissions:
      id-token: write
      contents: read
      pull-requests: write
    defaults:
      run:
        working-directory: .
    steps:
      - name: Checkout Repo
        uses: actions/checkout@v3

      - name: Environments Dependencies
        id: dependencies
        shell: bash
        run: |
          BRANCH="${GITHUB_HEAD_REF:-${GITHUB_REF#refs/heads/}}"
          if [[ $BRANCH == "master" ]]; then
            ENVIRONMENT="dev"
            WORKSPACE="dev"
          else
            ENVIRONMENT="dev"
            WORKSPACE="dev"
          fi
          echo ${BRANCH}
          echo "environment=${ENVIRONMENT}" >> $GITHUB_OUTPUT
          echo "workspace=${WORKSPACE}" >> $GITHUB_OUTPUT

      - name: Configure AWS Credentials for jrs-local
        uses: aws-actions/configure-aws-credentials@v4
        with:
          audience: sts.amazonaws.com
          aws-region: us-east-1
          role-to-assume: 'arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:role/github-actions-trust-policy'
          role-duration-seconds: 1800
          role-session-name: ${{ github.actor }}

      - name: Terraform Setup
        uses: hashicorp/setup-terraform@v2.0.3
        with:
          terraform_version: 1.3.7
          terraform_wrapper: false

      - name: Terraform fmt
        id: fmt
        run: terraform fmt -recursive -check

      - name: Terraform Init
        id: init-default
        run: terraform init

      - name: Terraform Workspace
        id: workspace
        env:
          TARGET: ${{ steps.dependencies.outputs.workspace }}
        run: terraform workspace select $TARGET

      - name: Terraform Init
        if: ${{ steps.dependencies.outputs.workspace == 'prod' }}
        id: init-prod
        run: terraform init

      - name: Terraform Validate
        id: validate
        run: terraform validate -no-color

      - name: Terraform Plan
        id: plan
        env:
          ENVIRONMENT: ${{ steps.dependencies.outputs.environment }}
          GITHUB_TOKEN: ${{ secrets.GH_PAT_TERRAFORM }}
          GITHUB_OWNER: ${{ secrets.GH_OWNER }}
          TF_VAR_token: ${{ secrets.GH_PAT_TERRAFORM }}
        run: |
          terraform plan -no-color

      - name: Terraform - Plan output file
        id: planFile
        env:
          ENVIRONMENT: ${{ steps.dependencies.outputs.environment }}
          GITHUB_TOKEN: ${{ secrets.GH_PAT_TERRAFORM }}
          GITHUB_OWNER: ${{ secrets.GH_OWNER }}
          TF_VAR_token: ${{ secrets.GH_PAT_TERRAFORM }}
        run: |
          terraform plan -out=plan.tmp
          terraform show -no-color plan.tmp > ./plan.out

      - uses: actions/github-script@v6
        if: always()
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const run_url = process.env.GITHUB_SERVER_URL + '/' + process.env.GITHUB_REPOSITORY + '/actions/runs/' + process.env.GITHUB_RUN_ID
            const run_link = '<a href="' + run_url + '">Actions</a>.'
            const fs = require('fs')
            const plan_file = fs.readFileSync('plan.out', 'utf8')
            const plan = plan_file.length > 65000 ? plan_file.toString().substring(0, 65000) + " ..." : plan_file
            const truncated_message = plan_file.length > 65000 ? "Output is too long and was truncated. You can read full Plan in " + run_link + "<br /><br />" : ""
            const output = `#### Terraform Format and Style üñå\`${{ steps.fmt.outcome }}\`
            #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
            #### Terraform Validation ü§ñ\`${{ steps.validate.outcome }}\`
            <details><summary>Validation Output</summary>

            \`\`\`\n
            ${{ steps.validate.outputs.stdout }}
            \`\`\`

            </details>

            #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`

            <details><summary>Show Plan</summary>

            \`\`\`\n
            ${plan}
            \`\`\`

            </details>
            ${truncated_message}

            *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`, Working Directory: \`${{ github.workspace }}\`, Workflow: \`${{ github.workflow }}\`*`;

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
              })

  # stop-runner:
  #   name: Stop self-hosted EC2 runner.
  #   needs:
  #     - start-runner
  #     - dependencies
  #     - plan
  #   runs-on: ubuntu-latest
  #   permissions:
  #     id-token: write
  #     contents: read
  #     pull-requests: write
  #   if: ${{ always() }}
  #   steps:
  #     - name: Configure AWS Credentials for jrs-local
  #       uses: aws-actions/configure-aws-credentials@v4
  #       with:
  #         audience: sts.amazonaws.com
  #         aws-region: us-east-1
  #         role-to-assume: 'arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:role/github-actions-trust-policy'
  #         role-duration-seconds: 1800
  #         role-session-name: ${{ github.actor }}

  #     - name: Stop EC2 runner
  #       uses: machulav/ec2-github-runner@v2
  #       with:
  #         mode: stop
  #         github-token: ${{ secrets.GH_PERSONAL_ACCESS_TOKEN }}
  #         label: ${{ needs.start-runner.outputs.label }}
  #         ec2-instance-id: ${{ needs.start-runner.outputs.ec2-instance-id }}
